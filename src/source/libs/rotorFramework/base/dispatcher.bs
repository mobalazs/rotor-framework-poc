import "listenerForDispatchers.bs"

interface Intent
    type as string
    payload as object
end interface

class Dispatcher extends ListenerForDispatchers

    public dispatcherId as string
    private taskNode as object
    private modelInstance as object
    private reducerInstance as object

    private middlewares = []
    private isExternal = false
    private isDispatchingInProgress = false
    private dispatchQueue = []

    private function new(dispatcherId = "" as string, modelInstance = invalid as object, reducerInstance = invalid as object) as object
        super()

        if dispatcherId = "" then dispatcherId = Rotor.Utils.getUUIDHex()
        m.dispatcherId = dispatcherId

        globalScope = GetGlobalAA()
        m.taskNode = globalScope.top

        m.reducerInstance = reducerInstance
        m.reducerInstance.ownerDispatcher = m ' will be destroyed properly
        m.reducerInstance.ownerDispatcherId = dispatcherId
        m.modelInstance = modelInstance

        ' for render thread (notification and data)
        m.taskNode.addField(m.dispatcherId, "node", true)

        m.exposeState()

        ' REGISTER DISPATCER
        dispatcherProvider = globalScope.appFw.dispatcherProvider
        dispatcherProvider.registerDispatcher(m, dispatcherId) ' selft registration
        return dispatcherProvider.getFacade(dispatcherId)
    end function

    private sub exposeState()

        newState = Rotor.Utils.createContentNode(m.modelInstance.state)
        m.taskNode.setField(m.dispatcherId, newState)

    end sub

    listeners = []

    public sub dispatch(intent as Intent)

        if intent.Count() > 1 and intent.payload = invalid then throw "[WARNING] Intent payload is invalid."

        if m.isDispatchingInProgress = false

            currentState = m.modelInstance.state
            newState = m.reducerInstance.reduce(currentState, intent)

            ' If intention has been dropped by a middleware
            if newState = invalid then return

            m.exposeState()

            if m.dispatchQueue.Count() > 0
                intent = m.dispatchQueue.shift()
                m.dispatch(intent)
            end if

        else

            m.dispatchQueue.push(intent)

        end if

    end sub

    public function getState(mapStateToProps = invalid as Dynamic, callerScope = invalid as object) as object

        state = m.modelInstance.state

        m.runMapStateToProps(state, mapStateToProps, callerScope)

        return state
    end function

    override sub destroy()
        super.destroy()

        m.dispatchQueue.clear()

        frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
        frameworkInstance.dispatcherProvider.deregisterDispatcher(m.dispatcherId)

        m.taskNode = invalid
        m.modelInstance = invalid
        m.reducerInstance = invalid
    end sub

end class


