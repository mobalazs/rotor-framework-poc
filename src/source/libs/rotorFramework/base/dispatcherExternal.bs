import "listenerForDispatchers.bs"

interface Intent
    type as string
    payload as object
end interface

namespace Rotor

    class DispatcherExternal extends ListenerForDispatchers

        sub new(dispatcherId as string, taskNode as object, threadType as string)
            super()

            ' Register dispatcher into dispatcher provider
            m.dispatcherId = dispatcherId
            m.taskNode = taskNode
            m.threadType = threadType

        end sub

        dispatcherId as string
        taskNode as object
        threadType as string
        isExternal = true
        listeners = []
        isStateObserved = false

        sub dispatch(intent as Intent)
            if intent.Count() > 1 and intent.payload = invalid then throw { message: "[WARNING] Intent payload is invalid." }
            m.taskNode.setField("rotorSync", {
                type: Rotor.const.ThreadSyncType.DISPATCH,
                payload: {
                    dispatcherId: m.dispatcherId,
                    intent: intent
                }
            })
        end sub

        override sub addListener(listenerConfig as object, listenerId as string, listenerScope as object)
            if m.isStateObserved = false
                m.setupObserver()
            end if
            super.addListener(listenerConfig, listenerId, listenerScope)
        end sub

        override sub removeAllListenesrByListenerId(listenerId as string)
            super.removeAllListenesrByListenerId(listenerId)
            if m.isStateObserved = true and m.listeners.Count() > 0
                m.removeObserver()
            end if
        end sub

        function getState(mapStateToProps = invalid as Dynamic, callerScope = invalid as object) as object

            state = m.taskNode.getField(m.dispatcherId)

            m.runMapStateToProps(state, mapStateToProps, callerScope)

            return state
        end function

        sub setupObserver()
            if m.threadType = Rotor.const.ThreadType.RENDER
                m.taskNode.observeFieldScoped(m.dispatcherId, "Rotor_dispatcherStateCallback")
            else
                fieldId = m.dispatcherId
                frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
                frameworkInstance.addObserver(fieldId, m.taskNode)
            end if
            m.isStateObserved = true
        end sub

        sub removeObserver()
            if m.threadType = Rotor.const.ThreadType.RENDER
                m.taskNode.unobserveFieldScoped(m.dispatcherId)
            else
                fieldId = m.dispatcherId
                frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
                frameworkInstance.removeObserver(fieldId, m.taskNode)
            end if
            m.isStateObserved = false
        end sub

        override sub destroy()
            super.destroy()

            frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance

            if m.isStateObserved = true

                if m.threadType = Rotor.const.ThreadType.RENDER
                    m.taskNode.unobserveFieldScoped(m.dispatcherId)
                else
                    fieldId = m.dispatcherId
                    frameworkInstance.removeObserver(fieldId, m.taskNode)
                end if
            end if
            m.listeners.Clear()
            m.taskNode = invalid

            frameworkInstance.dispatcherProvider.deregisterDispatcher(m.dispatcherId)

        end sub

    end class

end namespace

namespace Rotor
    ' Used by render thread
    sub dispatcherStateCallback(msg)

        dispatcherId = msg.getField()

        state = msg.getData()

        frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
        dispatcherInstance = frameworkInstance.dispatcherProvider.get(dispatcherId)
        dispatcherInstance.notifyListeners(state)

    end sub
end namespace
