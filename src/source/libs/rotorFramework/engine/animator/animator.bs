
import "../../libs/haystacknews-animate/animate.bs" ' https://github.com/haystacknews/animate


namespace Rotor

    class Animator

        animationStack = new Rotor.BaseStack()
        frameworkInstance as object

        sub new()
        end sub

        sub init(frameworkInstance as object)
            m.frameworkInstance = frameworkInstance
        end sub

        function getFactory(animatorId as string, ownerScope = invalid as object) as object

            ' Get Animator by animatorId

            if m.animationStack.has(animatorId)
                return {
                    animatorId: animatorId,
                    ownerScope: m.animationStack.get(animatorId).ownerScope,
                    play: sub()
                        if m.ownerScope?.animators?[m.animatorId]?.animNode <> invalid
                            m.ownerScope.animators[m.animatorId].animReverseNode.control = "stop"
                            m.ownerScope.animators[m.animatorId].animNode.control = "start"
                        end if
                    end sub,
                    reverse: sub()
                        if m.ownerScope?.animators?[m.animatorId]?.animNode <> invalid
                            m.ownerScope.animators[m.animatorId].animNode.control = "stop"
                            m.ownerScope.animators[m.animatorId].animReverseNode.control = "start"
                        end if
                    end sub
                }
            end if

            ' Register Animator by animatorId; Scoped where animation created.

            if ownerScope.animators = invalid then ownerScope.animators = {}
            if ownerScope.animators[animatorId] = invalid then ownerScope.animators[animatorId] = {}

            animatorInstance = {

                animatorId: animatorId,
                ownerScope: ownerScope,

                create: function(params)

                    targets = function(widgets)
                        preparedNodes = []
                        for each widget in Rotor.Utils.ensureArray(widgets)
                            node = widget.node
                            node.id = `${widget.id}-${widget.HID}`
                            preparedNodes.push(node)
                        end for
                        return preparedNodes
                    end function(params.targetWidgets)
                    params.delete("targetWidgets")

                    ' Reverse if normal; normal if reverse, dont touch if alternate
                    reverseParams = Rotor.Utils.deepCopy(params)
                    if reverseParams.direction = invalid  or reverseParams.direction = "normal"
                        reverseParams.direction = "reverse"
                    else if reverseParams?.direction = "reverse"
                        reverseParams.direction = "normal"
                    end if

                    params.targets = targets
                    m.ownerScope.animators[m.animatorId].animNode = animate.create(params)

                    reverseParams.targets = targets
                    m.ownerScope.animators[m.animatorId].animReverseNode = animate.create(reverseParams)
                    return m
                end function,

                timeline: function(params)
                    return {

                        ownerScope: m.ownerScope,
                        animatorId: m.animatorId,

                        timeline: animate.timeline(params),
                        timelineReverse: animate.timeline(params),

                        add: function(params)

                            targets = function(widgets)
                                preparedNodes = []
                                for each widget in Rotor.Utils.ensureArray(widgets)
                                    node = widget.node
                                    node.id = `${widget.id}-${widget.HID}`
                                    preparedNodes.push(node)
                                end for
                                return preparedNodes
                            end function(params.targetWidgets)
                            params.delete("targetWidgets")

                            ' Reverse if normal; normal if reverse, dont touch if alternate
                            reverseParams = Rotor.Utils.deepCopy(params)
                            if reverseParams.direction = invalid  or reverseParams.direction = "normal"
                                reverseParams.direction = "reverse"
                            else if reverseParams?.direction = "reverse"
                                reverseParams.direction = "normal"
                            end if

                            params.targets = targets
                            m.timeline.add(params)

                            reverseParams.targets = targets
                            m.timelineReverse.add(reverseParams)

                            return m
                        end function,

                        getAnimation: function()
                            m.ownerScope.animators[m.animatorId].animNode = m.timeline.getAnimation()
                            m.ownerScope.animators[m.animatorId].animReverseNode = m.timelineReverse.getAnimation()
                            return m
                        end function

                    }
                end function
            }

            m.animationStack.set(animatorId, animatorInstance)

            return animatorInstance

        end function

    end class

end namespace
