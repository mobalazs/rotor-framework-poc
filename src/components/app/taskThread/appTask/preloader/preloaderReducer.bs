namespace Reducers

    class PreloaderReducer extends Reducer

        preloaderDispatcher as Dispatcher
        appStoreDispatcher as Dispatcher

        sub logIntent(intent)
            print `[PRELOADER REDUCER][INFO] dispatcherId: ${m.ownerDispatcherId}, type: ${intent.type}`; intent?.payload?.preloadId <> invalid ? `, preloadId: ${intent.payload?.preloadId}` : ""
        end sub

        override function applyMiddlewares() as object
            return [

                ' (1) Logger middleware
                function(intent as Interface.Intent, state as object) as Interface.Intent
                    m.logIntent(intent)
                    return intent ' NEXT
                end function,

                ' (2) Aynchronous resources
                function(intent as Interface.Intent, state as object) as Interface.Intent
                    if intent.type = IntentType.PRELOADER.START_PRELOAD_RESOURCES

                        m.preloaderDispatcher = m.getDispatcher("preloader") as Dispatcher
                        m.appStoreDispatcher = m.getDispatcher("appStore") as Dispatcher

                        m.fetchResources()

                        return invalid
                    end if

                    return intent
                end function,

            ]
        end function

        override function reducer(state as Object, intent as Intent)

            if intent.type = IntentType.PRELOADER.ADD_ITEM
                state.counter++
                state.maxHit++

            else if intent.type = IntentType.PRELOADER.COMPLETED_ITEM
                state.counter--
            end if

            if state.counter = 0
                state.resourcesReady = true
            else
                return invalid ' possibly to stop refresh state
            end if

            return state
        end function

        sub fetchResources() ' simulation

            ' (1) Dispatch add item
            m.preloaderDispatcher.dispatch({
                type: IntentType.PRELOADER.ADD_ITEM,
                payload: {
                    preloadId: "loadingScreenMinTime"
                }
            })

            ' (2) Get minimum loading duration
            appStoreState = m.appStoreDispatcher.getState()
            loadingScreenMinTime = appStoreState.loadingScreenMinTime

            ' (3) dispatch completed item, if done
            sleepDispatcher = m.getDispatcher("sleep")
            sleepDispatcher.addListener({
                callback: sub()
                    m.dispatch({
                        type: IntentType.PRELOADER.COMPLETED_ITEM,
                        payload: {
                            preloadId: "loadingScreenMinTime"
                        }
                    })
                end sub,
                once: true
            })

            ' (4) Start async process
            sleepDispatcher.dispatch({
                type: IntentType.SLEEP.START,
                payload: {
                    duration: loadingScreenMinTime
                }
            })


        end sub

    end class

end namespace
