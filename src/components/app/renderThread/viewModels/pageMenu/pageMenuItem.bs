namespace ViewModels

    class PageMenuItem extends ViewModel

        override sub onUpdateView()
            itemIconWidget = m.getWidget("itemIcon")
            itemIconWidget.refresh("fields.blendColor")
            itemLabel = m.getWidget("itemLabel")
            itemLabel.refresh("fields.color")
        end sub

        override function template() as object

            focus = {
                onFocusChanged: sub (isFocused as boolean)
                    m.onUpdateView()
                    if isFocused = true and m.props.isAutoSelectOnFocusEnabled = true
                        m.context.notifySelection(m.props.optionKey, m.props.isActive)
                    end if
                end sub,
                onSelected: sub()
                    m.context.notifySelection(m.props.optionKey, m.props.isActive)
                end sub
            }

            return {
                theme: "menu",
                sgName: "Group",
                focus: focus,
                context: {
                    isFocused: false, ' as default
                    notifySelection: sub(pageKey, isActive)
                        if isActive = false
                            m.dispatcher.appStore.dispatch({
                                type: IntentType.APP_STORE.SET_ACTIVE_PAGE_KEY,
                                payload: {
                                    activePageKey: pageKey
                                }
                            })
                        end if
                    end sub
                },
                dispatcher: "appStore",
                fields: {
                    translation: function() as object
                        theme = m.context.theme.menu.optionlistContent.pageMenuItem
                        return [0, m.props.optionIndex * (theme.height + (theme.marginBottom ?? 0))]
                    end function
                },
                children: [
                    {
                        id: "itemIcon",
                        sgName: "Poster",
                        fields: {
                            blendColor: function() as string
                                if m.context.isFocused
                                    return m.context.theme.menu.shared.menuItemColor.focused
                                else
                                    return m.props.isActive ? m.context.theme.menu.shared.menuItemColor.active : m.context.theme.menu.shared.menuItemColor.default
                                end if
                            end function,
                            width: "#theme.menu.shared.icon.size.width",
                            height: "#theme.menu.shared.icon.size.height",
                            uri: `#theme.menu.pageMenu.menuIcons.${m.props.optionKey}.url`,
                            translation: function() ' expression example
                                theme = m.context.theme.menu.optionlistContent.pageMenuItem
                                return [theme.labelWidth + theme.marginRight, 0]
                            end function
                        }
                    }, {

                        id: "itemLabel",
                        sgName: "Label",
                        fontStyle: "#theme.menu.shared.menuLabelFontStyle",
                        onMountWidget: sub()
                            m.animationIndex = m.props.optionIndex ' will be used to sort labelItems for animation
                        end sub,
                        fields: {
                            color: function() as string
                                if m.context.isFocused
                                    return m.context.theme.menu.shared.menuItemColor.focused
                                else
                                    return m.props.isActive ? m.context.theme.menu.shared.menuItemColor.active : m.context.theme.menu.shared.menuItemColor.default
                                end if
                            end function,
                            text: `#tr.menuItems.${m.props.optionKey}.text`,
                            width: "#theme.menu.optionlistContent.pageMenuItem.labelWidth",
                            height: "#theme.menu.shared.icon.size.height",
                            vertAlign: "center",
                            horizAlign: "right"
                        }
                    }
                ]
            }

        end function

    end class

end namespace
