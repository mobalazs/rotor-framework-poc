namespace ViewModels

    class PageMenu extends ViewModels.OptionList

        appStoreDispatcher as DispatcherFacade

        override sub onCreateView()

            m.appStoreDispatcher = m.getDispatcher("appStore")

            ' LISTENER (Props will be set by mapStateToProps before callback fire)
            m.appStoreDispatcher.addListener({
                shouldUpdate: function(props, newState)
                    return props.activeOptionKey <> newState.activePageKey
                end function,
                mapStateToProps: sub(props, state)
                    props.activeOptionKey = state.activePageKey
                end sub,
                callback: "onUpdateView" ' as default (and note that this is an inherited method from OptionList)
            })

            ' SET INITIAL PROPS
            m.appStoreDispatcher.getState(sub(props, state)
                props.append({
                    activeOptionKey: state.activePageKey,
                    optionKeys: state.pageList,
                    optionviewModel: ViewModels.PageMenuItem,
                    isAutoSelectOnFocusEnabled: false
                })
            end sub)

        end sub

        override sub afterViewMounted()
            ' trigger alignment update
            m.render({
                theme: ["menu.pageMenu", "safeAreaOffsets", "menu.optionlistContent.pageMenuItem"],
                fields: {
                    translation: function()
                        pageMenuItemTheme = m.context.theme.menu.optionlistContent.pageMenuItem
                        width = 285
                        height = m.props.optionKeys.Count() * (pageMenuItemTheme.height + pageMenuItemTheme.marginBottom)
                        xOffset = m.context.theme.menu.pageMenu.bg.size.width - width
                        yOffset = (m.context.theme.menu.pageMenu.verticalSeparetorLine.size.height - height) / 2 + m.context.theme.safeAreaOffsets.y
                        return [xOffset, yOffset]
                    end function
                },
                onDestroyWidget: sub()
                    m.animator = m.animator
                end sub
            })
        end sub


        override sub onDestroyView()
            m.appStoreDispatcher.destroy()
            m.appStoreDispatcher = invalid
        end sub

    end class

end namespace
