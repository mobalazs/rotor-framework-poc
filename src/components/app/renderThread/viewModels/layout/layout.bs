' You are not forced to use Frameworks's design system; Whats is more you can use them mixed.
namespace ViewModels

    class LayoutViewModel extends ViewModel

        appStoreDispatcher as DispatcherFacade

        pagesViewModels = {
            home: ViewModels.HomePage,
            movies: ViewModels.MoviesPage,
            series: ViewModels.SeriesPage,
            rowListExample: ViewModels.RowListExamplePage,
            zoomListSample: ViewModels.ZoomListSamplePage,
            playground1: ViewModels.Playground1Page,
            playground2: ViewModels.Playground2Page,
            settings: ViewModels.SettingsPage
        }

        override function template() as object
            safeAreaOffsets = "{#theme=safeAreaOffsets}"
            designResolution = "{#theme=designResolution}"

            return {
                ' You can set the id, but it is set automatically to the m.id
                sgName: "Rectangle",
                fields: {
                    width: design.designResolution.w,
                    height: design.designResolution.h,
                    color: design.colors.black
                },
                children: [
                    {
                        id: "backgrounds",
                        sgName: "Group",
                        children: [
                            {
                                id: "decor",
                                zIndex: 2,
                                sgName: "Poster",
                                fields: {
                                    uri: "#theme.backgrounds.decor.posterUrl",
                                    blendColor: "#theme.backgrounds.decor.blendColor",
                                    translation: "#theme.backgrounds.decor.translation",
                                    opacity: "#theme.backgrounds.decor.opacity",
                                    rotation: "#theme.backgrounds.decor.rotation",
                                    width: "#theme.backgrounds.decor.width",
                                    height: "#theme.backgrounds.decor.height"
                                }
                            }, {
                                id: "leftBg",
                                sgName: "Poster",
                                zIndex: 0,
                                fields: {
                                    width: design.designResolution.w,
                                    height: design.designResolution.h,
                                    uri: "#theme.backgrounds.leftBg.posterUrl",
                                    blendColor: "#theme.backgrounds.leftBg.blendColor"
                                }
                            }, {
                                id: "rightBg",
                                sgName: "Poster",
                                zIndex: 1,
                                fields: {
                                    rotation: 3.141592,
                                    translation: [design.designResolution.w, design.designResolution.h],
                                    width: design.designResolution.w,
                                    height: design.designResolution.h,
                                    uri: "#theme.backgrounds.rightBg.posterUrl",
                                    blendColor: "#theme.backgrounds.rightBg.blendColor"
                                }
                            }
                        ]
                    }, {
                        id: "separatorContainer",
                        sgName: "Group",
                        fields: {
                            translation: [30, design.safeAreaOffsets.y]
                        },
                        children: [
                            {
                                id: "gradientBg",
                                sgName: "Poster",
                                zIndex: 0,
                                fields: {
                                    uri: "#theme.menu.pageMenu.bg.url",
                                    width: "#theme.menu.pageMenu.bg.size.width",
                                    height: "#theme.menu.pageMenu.bg.size.height",
                                    blendColor: "#theme.menu.pageMenu.bg.color",
                                    translation: "#theme.menu.pageMenu.bg.translation"
                                }
                            }, {
                                id: "separator",
                                sgName: "Rectangle",
                                fields: {
                                    height: "#theme.menu.pageMenu.verticalSeparetorLine.size.height",
                                    width: "#theme.menu.pageMenu.verticalSeparetorLine.size.width",
                                    color: "#theme.menu.pageMenu.verticalSeparetorLine.color",
                                    translation: "#theme.menu.pageMenu.verticalSeparetorLine.translation"
                                }
                            }, {
                                id: "appTitle",
                                sgName: "Label",
                                fontStyle: "#theme.fontStyles.H1",
                                fields: {
                                    text: "#tr.appTitle",
                                    vertAlign: "right",
                                    translation: "#theme.menu.pageMenu.appTitleTransition",
                                    color: "#theme.colors.primary_2"
                                }
                            }
                        ]
                    }, {
                        id: "pageMenuContainer",
                        sgName: "Group",
                        focus: {
                            group: {
                                onFocusChanged: sub(isFocused) 'type m as Interface.Widget

                                    if not m.props.activePageKey = "settings" ' keep menu on setting page
                                        if isFocused
                                            m.animator("focusPageMenuAnimation").play()
                                        else
                                            m.animator("focusPageMenuAnimation").reverse()
                                        end if
                                    end if

                                    ' One line version:
                                    ' m.animator("focusPageMenuAnimation")[isFocused ? "play" : "reverse"]()

                                end sub
                            }
                        },
                        children: [{
                            id: "pageMenu",
                            viewModel: ViewModels.PageMenu
                        }]
                    }, {
                        id: "viewContainer",
                        sgName: "Group",
                        focus: {
                            group: {
                                left: "pageMenu"
                            }
                        },
                        fields: {
                            translation: [360, 150]
                        }
                    }
                ]
            }
        end function

        ' ViewModel lifecycle hoook
        override sub onCreateView()

            ' Get dispatcher facades
            m.appStoreDispatcher = m.getDispatcher("appStore") as DispatcherFacade

            ' get initial state and map to props
            m.appStoreDispatcher.getState(sub(props, state)
                props.pageList = state.pageList ' remember prev page
                props.pageSettings = state.pageSettings ' remember prev page
                props.activePageKey = state.activePageKey ' get new page key
            end sub)

            ' Setup dispatcher listeners
            m.appStoreDispatcher.addListener({
                shouldUpdate: function(props, newState) as object
                    return props.activePageKey <> newState.activePageKey
                end function,
                mapStateToProps: sub(props, state)
                    props.prevActiveKey = props.activePageKey ' remember prev page
                    props.activePageKey = state.activePageKey ' get new page key
                end sub,
                callback: "proceedPageTransition" ' refering to a method in this scope
            })

        end sub

        ' ViewModel lifecycle hoook
        override sub afterViewMounted()

            if m.props.shouldPrerenderPages = true
                m.prerenderPages()
            else
                m.layoutReady()
            end if

        end sub

        ' ViewModel lifecycle hoook
        override sub onDestroyView()
            m.appStoreDispatcher.destroy()
            m.appStoreDispatcher = invalid
        end sub


        ' -------- Custom ViewModel Methods --------

        sub prerenderPages()

            pagesToRender = []

            for each pageKey in m.props.pageList
                pageSettings = m.props.pageSettings[pageKey]
                isPrerenderEnabled = pageSettings.enablePrerender
                if isPrerenderEnabled = true
                    pageViewModel = m.pagesViewModels[pageKey]
                    pagesToRender.push({
                        id: `page-${pageKey}`,
                        viewModel: pageViewModel,
                        props: {
                            pageKey: pageKey
                        }
                    })
                end if
            end for

            m.render({
                id: "layout",
                children: {
                    id: "viewContainer",
                    children: pagesToRender
                }
            }, {
                callback: m.layoutReady
            })

        end sub

        ' The following logic meets most strategies as per configurable requirements
        ' (1) erase previous page which should not be kept alive
        ' (2) hide not active alive pages
        ' (3) create new page if does not exist
        sub proceedPageTransition()

            ' (1)
            ' erase prev page if it should not be kept alive, based on config
            prevPageKey = m.props?.prevActiveKey ?? ""
            if prevPageKey <> ""
                pageSetting = m.props.pageSettings[prevPageKey]
                if not pageSetting?.enableKeepAlive = true
                    m.erase(`page-${prevPageKey}`)
                end if
            end if

            ' (2) hide alive pages, visible active page
            viewcontainer = m.getWidget("viewContainer")
            for each childId in viewcontainer.children
                childNode = viewcontainer.children[childId].node
                childNode.visible = LCase(`page-${m.props.activePageKey}`) = childId ' visible if equal
            end for

            ' If page does exist then make it visible, if does not exist then we need to create it.
            doesExistPage = viewcontainer.children.LookupCI(`page-${m.props.activePageKey}`) <> invalid

            m.render({
                children: [
                    {
                        id: "viewContainer",
                        children: not doesExistPage ? {
                            id: `page-${m.props.activePageKey}`,
                            viewModel: m.pagesViewModels[m.props.activePageKey],
                            props: {
                                pageKey: m.props.activePageKey
                            }
                        } : {}
                    }, {
                        ' update focus config
                        id: "pageMenu",
                        focus: {
                            group: {
                                right: `page-${m.props.activePageKey}`
                            }
                        }
                    }
                ]
            })

        end sub

        sub layoutReady()


            appTitleWidget = m.getWidget("appTitle")
            pageMenuContainer = m.getWidget("pageMenuContainer")
            separatorContainer = m.getWidget("separatorContainer")
            viewContainer = m.getWidget("viewContainer")
            pageMenuItemLabels = m.findWidgets("pageMenu/**/itemLabel")
            pageMenuItemLabels.sortby("animationIndex")
            pageMenuWidget = m.getWidget("pageMenu")


            m.animator("focusPageMenuAnimation").timeline({
                duration: 0.2
            }).add({
                duration: 0.25,
                targetWidgets: appTitleWidget,
                direction: "reverse",
                y: -150,
                opacity: 0
            }).add({
                targetWidgets: [separatorContainer, pageMenuContainer],
                direction: "reverse",
                translateX: -150
            }).add({
                targetWidgets: viewContainer,
                direction: "reverse",
                translation: [-150, -90]
            }).add({
                duration: 0.3,
                targetWidgets: pageMenuItemLabels,
                direction: "reverse",
                x: -50,
                opacity: 0,
                delay: function(t, i, l)
                    return i * 0.05
                end function
            }).getAnimation()

            ' first page transition
            m.proceedPageTransition()
            m.erase("./loadingScreen")

            pageMenuWidget.plugins.focus.setFocus(true, true)

            ' Notify ready beacon (ONCE)
            m.node.signalBeacon("AppLaunchComplete")




        end sub

    end class

end namespace
