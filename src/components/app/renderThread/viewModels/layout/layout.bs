
namespace ViewModels

    class LayoutViewModel extends ViewModel

        pagesViewModels = {
            home: ViewModels.HomePage,
            movies: ViewModels.MoviesPage,
            series: ViewModels.SeriesPage,
            playground1: ViewModels.Playground1Page,
            playground2: ViewModels.Playground2Page,
            settings: ViewModels.SettingsPage
        }

        override function template() as object
            safeAreaOffsets = "{#theme=safeAreaOffsets}"
            designResolution = "{#theme=designResolution}"

            return {
                ' You can set the id, but it is set automatically to the m.id
                sgName: "Rectangle",
                fields: {
                    width: designResolution.w,
                    height: designResolution.h,
                    color: "0x000000FF"
                },
                children: [
                    {
                        id: "backgrounds",
                        sgName: "Group",
                        children: [
                            {
                                id: "decor",
                                zIndex: 2,
                                sgName: "Poster",
                                fields: {
                                    uri: "#theme.backgrounds.decor.posterUrl",
                                    blendColor: "#theme.backgrounds.decor.blendColor",
                                    translation: "#theme.backgrounds.decor.translation",
                                    opacity: "#theme.backgrounds.decor.opacity",
                                    rotation: "#theme.backgrounds.decor.rotation",
                                    width: "#theme.backgrounds.decor.width",
                                    height: "#theme.backgrounds.decor.height"
                                }
                            }, {
                                id: "leftBg",
                                sgName: "Poster",
                                zIndex: 0,
                                fields: {
                                    width: designResolution.w,
                                    height: designResolution.h,
                                    uri: "#theme.backgrounds.leftBg.posterUrl",
                                    blendColor: "#theme.backgrounds.leftBg.blendColor"
                                }
                            }, {
                                id: "rightBg",
                                sgName: "Poster",
                                zIndex: 1,
                                fields: {
                                    rotation: 3.141592,
                                    translation: [designResolution.w, designResolution.h],
                                    width: designResolution.w,
                                    height: designResolution.h,
                                    uri: "#theme.backgrounds.rightBg.posterUrl",
                                    blendColor: "#theme.backgrounds.rightBg.blendColor"
                                }
                            }
                        ]
                    }, {
                        id: "separatorContainer",
                        sgName: "Group",
                        ' zIndex: 1,
                        fields: {
                            translation: [30, safeAreaOffsets.y]
                        },
                        children: [
                            {
                                id: "gradientBg",
                                sgName: "Poster",
                                zIndex: 0,
                                fields: {
                                    uri: "#theme.menu.pageMenu.bg.url",
                                    width: "#theme.menu.pageMenu.bg.size.width",
                                    height: "#theme.menu.pageMenu.bg.size.height",
                                    blendColor: "#theme.menu.pageMenu.bg.color",
                                    translation: "#theme.menu.pageMenu.bg.translation"
                                }
                            }, {
                                id: "separator",
                                sgName: "Rectangle",
                                fields: {
                                    height: "#theme.menu.pageMenu.verticalSeparetorLine.size.height",
                                    width: "#theme.menu.pageMenu.verticalSeparetorLine.size.width",
                                    color: "#theme.menu.pageMenu.verticalSeparetorLine.color",
                                    translation: "#theme.menu.pageMenu.verticalSeparetorLine.translation"
                                }
                            }, {
                                id: "appTitle",
                                sgName: "Label",
                                fontStyle: "#theme.fontStyles.H1",
                                fields: {
                                    text: "#tr.appTitle",
                                    vertAlign: "right",
                                    translation: "#theme.menu.pageMenu.appTitleTransition",
                                    color: "#theme.colors.primary_2"
                                }
                            }
                        ]
                    }, {
                        id: "pageMenuWrapper",
                        ' zIndex: 3,
                        sgName: "Group",
                        children: [{
                            id: "pageMenu",
                            viewModel: ViewModels.PageMenu
                        }]
                    }, {
                        id: "viewContainer",
                        sgName: "Group",
                        ' zIndex: 2,
                        focus: {
                            group: {
                                left: "pageMenu"
                            }
                        },
                        fields: {
                            translation: [360, 200]
                        }
                    }
                ]
            }
        end function

        ' ViewModel lifecycle hoook
        override sub onCreateView()

            ' Get dispatcher facades
            m.appStoreDispatcher = m.getDispatcher("appStore")

            mapStateToProps = sub(props, state)
                props.activePageKey = state.activePageKey
            end sub

            ' get initial appstore state and append to this ViewModel's props
            m.appStoreDispatcher.getState(mapStateToProps)

            ' Setup dispatcher listeners
            m.appStoreDispatcher.addListener({
                shouldUpdate: function(props, newState) as object
                    return props.activePageKey <> newState.activePageKey
                end function,
                mapStateToProps: mapStateToProps,
                callback: "proceedPageTransition" ' refering to a method in this scope
            })

        end sub

        ' ViewModel lifecycle hoook
        override sub afterViewMounted()

            if m.props.shouldPrerenderPages = true
                m.prerenderPages()
            else
                m.layoutReady()
            end if

        end sub

        ' ViewModel lifecycle hoook
        override sub onDestroyView()
            m.appStoreDispatcher.destroy()
            m.appStoreDispatcher = invalid
        end sub


        ' -------- Custom ViewModel Methods --------

        sub prerenderPages()

            for each pageKey in m.appStoreDispatcher.pageList
                pageSettings = m.appStoreDispatcher.pageSettings[pageKey]
                isEnabledPrerender = pageSettings.enablePrerender
                if isEnabledPrerender = true
                    pageViewModel = m.pagesViewModels[pageKey]
                    m.render({
                        id: "layout",
                        children: {
                            id: "viewContainer",
                            children: {
                                id: `page-${pageKey}`,
                                viewModel: pageViewModel,
                                props: {
                                    pageKey: pageKey
                                }
                            }
                        }
                    })
                end if
            end for

            m.layoutReady()

        end sub

        sub proceedPageTransition()
            activePageKey = m.props.activePageKey ' Using props which visible in the enttyre view (in every widget on layout)

            viewcontainer = m.getWidget("viewContainer")

            ' hide other pages
            for each childId in viewcontainer.children
                childNode = viewcontainer.children[childId].node
                childNode.visible = `page-${activePageKey}` = childId ' visible if equal
            end for

            ' If page is exist then make it visible, if does not exist then we need to create it.
            doesExistPage = viewcontainer.children.LookupCI(`page-${activePageKey}`) <> invalid

            m.render({
                children: [
                    {
                        id: "viewContainer",
                        children: not doesExistPage ? {
                            id: `page-${activePageKey}`,
                            viewModel: m.pagesViewModels[activePageKey],
                            props: {
                                pageKey: activePageKey
                            }
                        } : {}
                    }, {
                        ' update focus config
                        id: "pageMenu",
                        focus: {
                            group: {
                                right: `page-${activePageKey}`
                            }
                        }
                    }
                ]
            })

        end sub

        sub layoutReady()

            m.proceedPageTransition()

            ' Pass the focus to framework's node (ONCE)
            m.parent.node.setFocus(true)

            ' Set the focus initially (ONCE)
            pageMenuWidget = m.getWidget("./pageMenu")
            pageMenuWidget.plugins.focus.setFocus()

            ' Notify ready beacon (ONCE)
            m.node.signalBeacon("AppLaunchComplete")

            m.erase("./loadingScreen")

        end sub

    end class

end namespace
