
namespace ViewModels

    class LoadingScreen extends ViewModel

        override function template() as object

            designResolution = "{#theme=designResolution}"

            if m.props.isSpinnerVisilbe = invalid then m.props.isSpinnerVisilbe = true

            return {
                zIndex: 1,
                sgName: "Rectangle",
                theme: ["colors"],
                context: { designResolution: designResolution },
                fields: {
                    color: "@context.theme.colors.black",
                    width: designResolution.w,
                    height: designResolution.h
                },
                children: [
                    {
                        sgName: "LayoutGroup",
                        fields: {
                            itemSpacings: [10],
                            horizAlignment: "center",
                            vertAlignment: "center",
                            translation: function() as object
                                return [m.context.designResolution.w / 2, m.context.designResolution.h / 2] ' I dont like LayoutGroup, but it can be useful
                            end function
                        },
                        children: [{
                            sgName: "Label",
                            theme: "fontStyles.H1",
                            fontStyle: "#theme.fontStyles.H1",
                            fields: {
                                text: "LOADING",
                                color: "#theme.colors.white"
                            }
                        }, {
                            id: "defaultSpinner",
                            viewModel: ViewModels.BusySpinner
                        }, {
                            id: "lastMomentLabel",
                            sgName: "Label",
                            fontStyle: "#theme.fontStyles.H2",
                            fields: {
                                visible: false,
                                text: "Just a moment..."
                            }
                        }]
                    }
                ]
            }

        end function

        ' ViewModel lifecycle hoook
        override sub afterViewMounted()

            if m.props.shouldPreloadResources = true

                ' Get dispatcher facade
                m.preloaderDispatcher = m.getDispatcher("preloader")

                ' Listening for preloader
                m.preloaderDispatcher.addListener({
                    shouldUpdate: function(props, newState) as object
                        return newState.resourcesReady = true
                    end function,
                    callback: m.onResourcesReady, ' refering to a method in this scope
                    once: true
                })

                ' Actually start preloading
                m.preloaderDispatcher.dispatch({
                    type: IntentType.PRELOADER.START_PRELOAD_RESOURCES
                })

            else

                m.renderLayout()

            end if

        end sub

        ' ViewModel lifecycle hoook
        override sub onDestroyView()
            if m.props.shouldPreloadResources = true
                m.preloaderDispatcher.destroy()
                m.preloaderDispatcher = invalid
            end if
        end sub


        ' -------- Custom ViewModel Methods --------

        sub onResourcesReady()

            ' During pre-rendering we should not run animation at all
            m.erase("defaultSpinner")
            lastMomentLabel = m.getWidget("lastMomentLabel")
            lastMomentLabel.render({
                fields: {
                    visible: true,
                    enableRenderTracking: true
                },
                observer: {
                    ' We are going to flood builder with pre-rendering requests, but:
                    ' Roku need time to render changes on screen ("One second left..." text)
                    ' What we're doing here is completely native and a generic approach in Rotor Builder.
                    fieldId: "renderTracking",
                    callback: sub(payload)
                        if payload?.renderTracking = "full"

                            ' We're in scope of lastMomentLabel, but we need the loadingSceen viewModel to proceed rendering
                            loadingScreenWidget = m.getWidget("./loadingScreen")
                            loadingScreenWidget.renderLayout()

                        end if

                    end sub
                }
            })

        end sub

        sub renderLayout()

            m.parent.render({
                id: "layout",
                zIndex: 0,
                viewModel: ViewModels.LayoutViewModel,
                props: {
                    shouldPrerenderPages: m.props.shouldPrerenderPages
                }
            })

        end sub

    end class

end namespace
