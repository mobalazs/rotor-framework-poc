namespace ViewModels

    class HomePage extends ViewModel

        override sub onCreateView()

            m.homeFeedDispatcher = m.getDispatcher("homeFeedDispatcher")
            m.homeFeedDispatcher.addListener({
                mapStateToProps: sub(props, state)
                    props.rowListContentNode = state.content
                end sub,
                callback: m.onUpdateView ' Value can be a string as well, this value is equivalent with: "onUpdateView"
            })

            ' POC provide sample for preloading data. In this case you can get state immediately.
            state = m.homeFeedDispatcher.getState()
            m.props.content = state.content
        end sub

        override sub afterViewMounted()
            ' Start loading if not available (in a more complex samlpe we can check if content has expired.)
            if m.props.content = invalid
                m.homeFeedDispatcher.dispatch({
                    type: IntentType.CONTENT_READER.START_LOADING
                })
            else
                m.onUpdateView()
            end if
        end sub

        override sub onUpdateView(rowIndex = 0, colIndex = 0)
            m.render({
                id: "homeTeaser",
                props: {
                    tileContentNode: m.props.content.getChild(rowIndex).getChild(colIndex), ' todo
                    rowType: m.props.content.getChild(rowIndex).rowType
                }
            })
        end sub

        override sub onDestroyView()
            m.homeFeedDispatcher.destroy()
        end sub

        override function template() as object
            return {
                focus: {
                    group: {
                        forwardFocusId: "rowListExample",
                        back: "pageMenu"
                    }
                },
                sgName: "Group",
                children: [
                    {
                        id: "homeTeaser",
                        viewModel: ViewModels.Teaser
                    },
                    {
                        viewModel: ViewModels.SimpleButton,
                        focus: {
                            onSelected: sub()
                                m.parent.onUpdateView(0, 0)
                            end sub
                        },
                        fields: {
                            translation: [0, 300]
                        }
                    },
                    {
                        viewModel: ViewModels.SimpleButton,
                        focus: {
                            onSelected: sub()
                                m.parent.onUpdateView(1, 0)
                            end sub
                        },
                        fields: {
                            translation: [0, 400]
                        }
                    }
                    ' {
                    '     id: "homeCarousel",
                    '     viewModel: ViewModels.Carousel,
                    '     props: {
                    '         content: m.props.content
                    '     }
                    ' }
                ]
            }
        end function

    end class

end namespace
