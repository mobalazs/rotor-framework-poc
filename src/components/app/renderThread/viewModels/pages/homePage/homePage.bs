namespace ViewModels

    class HomePage extends ViewModel

        override sub onCreateView()

            m.homeReaderDispatcher = m.getDispatcher("homeReader")
            m.homeReaderDispatcher.addListener({
                mapStateToProps: sub(props, state)
                    props.zoomListNode = state.zoomListNode
                end sub,
                callback: m.updateHomeContent ' Value can be a string as well, this value is equivalent with: "updateHomeContent"
            })

            ' map current state to props in this scope
            m.homeReaderDispatcher.getState(sub(props, state)
                props.zoomListNode = state.zoomListNode
            end sub)

        end sub

        override sub afterViewMounted()
            m.updateHomeContent()
        end sub

        override sub onUpdateView()
        end sub

        override sub onDestroyView()
            m.homeReaderDispatcher.destroy()
        end sub



        sub updateHomeContent()
            m.render({
                id: "homeRowList",
                fields: {
                    content: m.props.zoomListNode
                }
            })
        end sub


        ' Rotor interpretation of rokudev zoomRowListDefaultLayoutTest sample.
        ' original: https://github.com/rokudev/samples/tree/master/ux%20components/lists%20and%20grids/zoomRowListDefaultLayoutTest
        override function template() as object
            return {
                focus: {
                    group: {
                        forwardFocusId: "homeRowList",
                        back: "pageMenu"
                    }
                },
                sgName: "Group",
                children: [
                    {
                        id: "homeRowList",
                        sgName: "ZoomRowList",
                        focus: {
                            enableNativeFocus: true
                        },
                        observer: [
                            ' You will see how observer works, and 2 different ways how to access another node using node tree.
                            {
                                fieldId: "scrollingStatus",
                                callback: sub(widget, payload)
                                    m.getWidget("../scrollingStatusLabel").node.text = `scrollingStatus is: ${payload.scrollingStatus.toStr()}`
                                end sub
                            },
                            {
                                fieldId: "rowItemFocused",
                                callback: sub(widget, payload)
                                    m.parent.children["rowItemFocusedLabel"].node.text = `rowItemFocused is: ${payload.rowItemFocused[0].toStr()} ${payload.rowItemFocused[1].toStr()}`
                                end sub
                            },
                            {
                                fieldId: "rowFocused",
                                callback: sub(widget, payload)
                                    m.parent.children.rowFocusedLabel.node.text = `rowFocused is: ${payload.rowFocused.toStr()}`

                                end sub
                            }
                        ],
                        fields: {
                            itemComponentName: "SimpleGridItem",
                            translation: [20, 90]
                        }

                    },
                    {
                        id: "scrollingStatusLabel",
                        sgName: "Label",
                        fields: {
                            translation: [20, 40],
                            text: "scrollingStatus: false"
                        }
                    },
                    {
                        id: "rowItemFocusedLabel",
                        sgName: "Label",
                        fields: {
                            translation: [420, 40],
                            text: "rowItemFocused: 0, 0"
                        }
                    },
                    {
                        id: "rowFocusedLabel",
                        sgName: "Label",
                        fields: {
                            translation: [820, 40],
                            text: "rowFocused: 0"
                        }
                    },
                    {
                        sgName: "Label",
                        fields: {
                            translation: [20, -15],
                            text: `Press the “back” button on the remote control to return to the side menu.`
                        }
                    },
                ]
            }
        end function

    end class

end namespace
