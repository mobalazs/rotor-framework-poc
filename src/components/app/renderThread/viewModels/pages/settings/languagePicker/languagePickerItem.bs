namespace ViewModels

    class LanguagePickerItem extends ViewModel

        override sub onUpdateView()
            itemLabel = m.getWidget("itemLabel")
            itemLabel.refresh("fields.color")
        end sub

        override function template() as object

            focus = {
                onFocusChanged: sub (isFocused as boolean)
                    m.onUpdateView()
                    if isFocused = true and m.props.isAutoSelectOnFocusEnabled = true
                        m.context.notifySelection(m.props.optionKey, m.props.isActive)
                    end if
                end sub,

                onSelected: sub ()
                    m.context.notifySelection(m.props.optionKey, m.props.isActive)
                end sub
            }

            return {
                theme: ["menu.optionlistContent.languagePickerItem", "settings.languagePicker", "menu.shared.menuItemColor"],
                sgName: "Group",
                focus: focus,
                dispatcher: "user",
                context: {
                    isFocused: false, ' as default
                    notifySelection: sub(languageKey, isActive)
                        if isActive = false
                            m.dispatcher.user.dispatch({
                                type: IntentType.USER.SET_ACTIVE_LANGUAGE_KEY,
                                payload: {
                                    activeLanguageKey: languageKey
                                }
                            })
                        end if
                    end sub
                },
                fields: {
                    translation: function() as object ' expression example
                        theme = m.context.theme.menu.optionlistContent.languagePickerItem
                        return [0, m.props.optionIndex * (theme.height + (theme.marginBottom ?? 0))]
                    end function
                },
                children: {
                    id: "itemLabel",
                    sgName: "Label",
                    fontStyle: "#theme.fontStyles.subMenuLabelFontStyle",
                    fields: {
                        color: function() as string
                            if m.context.isFocused
                                return m.context.theme.menu.shared.menuItemColor.focused
                            else
                                return m.props.isActive ? m.context.theme.menu.shared.menuItemColor.active : m.context.theme.menu.shared.menuItemColor.default
                            end if
                        end function,
                        text: "#tr.languages." + m.props.optionKey,
                        width: "#theme.settings.languagePicker.labelWidth",
                        height: "#theme.menu.shared.icon.size.height",
                        vertAlign: "center",
                        horizAlign: "center"
                    }
                }
            }

        end function

    end class

end namespace
