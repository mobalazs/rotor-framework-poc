namespace ViewModels

    class RowListExamplePage extends ViewModel

        override sub onCreateView()

            m.rowListReaderDispatcher = m.getDispatcher("rowListReader")
            m.rowListReaderDispatcher.addListener({
                mapStateToProps: sub(props, state)
                    props.rowListContentNode = state.content
                end sub,
                callback: m.onUpdateView ' Value can be a string as well, this value is equivalent with: "onUpdateView"
            })

        end sub

        override sub afterViewMounted()
            ' Start loading
            m.rowListReaderDispatcher.dispatch({
                type: IntentType.CONTENT_READER.START_LOADING
            })
        end sub

        override sub onUpdateView()
            m.updateHomeContent()
        end sub

        override sub onDestroyView()
            m.rowListReaderDispatcher.destroy()
        end sub



        sub updateHomeContent()
            m.render({
                id: "rowListExample",
                fields: {
                    content: m.props.rowListContentNode
                }
            })
            ' Another way, but less flexible in aspect of meaintenance:
            ' m.children.rowListExample.node.content = m.props.rowListContentNode
        end sub

        override function template() as object
            return {
                focus: {
                    group: {
                        forwardFocusId: "rowListExample",
                        back: "pageMenu"
                    }
                },
                sgName: "Group",
                children: [
                    {
                        id: "viewTitle",
                        sgName: "Label",
                        tr: "menuItems." + m.props.pageKey,
                        theme: "fontStyles.H2",
                        fontStyle: "@context.theme.fontStyles.H2",
                        fields: {
                            text: "@context.tr.menuItems." + m.props.pageKey + ".text"
                        }
                    },
                    {
                        sgName: "Group",
                        fields: {
                            translation: [15, 100]
                        },
                        children: [
                            {
                                id: "rowListExample",
                                sgName: "RowList",
                                focus: {
                                    enableNativeFocus: true
                                },
                                context: {
                                    onDestroyWidget: sub()
                                        ' Native grid components will produce unparented roots if content is not invalidated.
                                        m.node.content = invalid
                                    end sub
                                },
                                fields: {
                                    itemComponentName: "RowListExampleItem",
                                    ' translation: [20, 100],


                                    ' rowTitleComponentName: "NativeHomeTitle",
                                    numColumns: 4,
                                    numRows: 2,

                                    itemSize: [4 * 200 + 5 * 30, 300],
                                    ' itemSpacing: [0, 30],
                                    ' rowHeights: [300 + 30],

                                    rowSpacings: [30],

                                    ' rowItemSize: [[200, 300]],
                                    ' rowItemSpacing: [[30, 0]],
                                    ' rowLabelOffset: [[0, 15]],

                                    showRowLabel: [true],

                                    rowFocusAnimationStyle: "floatingFocus",

                                    content: m.props.rowListContentNode


                                }
                            }
                        ]
                    }

                ]
            }
        end function

    end class

end namespace
